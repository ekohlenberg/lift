<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="get_wall_subscribers" xml:space="preserve">
    <value>
  select T.wall_id, T.tod, T.title,
  isnull( sun.user_id, 0) [sunday_user_id],
isnull( mon.user_id, 0) [monday_user_id],
isnull( tue.user_id, 0) [tuesday_user_id],
isnull( wed.user_id, 0) [wednesday_user_id],
isnull( thu.user_id, 0) [thursday_user_id],
isnull( fri.user_id, 0) [friday_user_id],
isnull( sat.user_id, 0) [saturday_user_id],
isnull( sun.appt, '') [sunday],
isnull( mon.appt, '') [monday],
isnull( tue.appt, '') [tuesday],
isnull( wed.appt, '') [wednesday],
isnull( thu.appt, '') [thursday],
isnull( fri.appt, '') [friday],
isnull( sat.appt, '') [saturday]
from
(
select 0 as tod,'12:00 AM' [title],  w.id [wall_id] from walls w where w.organization_id=${organization_id} and w.id=${wall_id}
union           
select 1 as tod,'1:00 AM' [title],  w.id [wall_id] from walls w where w.organization_id=${organization_id} and w.id=${wall_id}
union           
select 2 as tod,'2:00 AM' [title],  w.id [wall_id] from walls w where w.organization_id=${organization_id} and w.id=${wall_id}
union           
select 3 as tod,'3:00 AM' [title],  w.id [wall_id] from walls w where w.organization_id=${organization_id} and w.id=${wall_id}
union           
select 4 as tod,'4:00 AM' [title],  w.id [wall_id] from walls w where w.organization_id=${organization_id} and w.id=${wall_id}
union           
select 5 as tod,'5:00 AM' [title],  w.id [wall_id] from walls w where w.organization_id=${organization_id} and w.id=${wall_id}
union           
select 6 as tod,'6:00 AM' [title],  w.id [wall_id] from walls w where w.organization_id=${organization_id} and w.id=${wall_id}
union           
select 7 as tod,'7:00 AM' [title],  w.id [wall_id] from walls w where w.organization_id=${organization_id} and w.id=${wall_id}
union           
select 8 as tod,'8:00 AM' [title],  w.id [wall_id] from walls w where w.organization_id=${organization_id} and w.id=${wall_id}
union           
select 9 as tod,'9:00 AM' [title],  w.id [wall_id] from walls w where w.organization_id=${organization_id} and w.id=${wall_id}
union           
select 10 as tod, '10:00 AM' [title], w.id [wall_id] from walls w where w.organization_id=${organization_id} and w.id=${wall_id}
union           
select 11 as tod, '11:00 AM' [title], w.id [wall_id] from walls w where w.organization_id=${organization_id} and w.id=${wall_id}
union           
select 12 as tod, '12:00 PM' [title], w.id [wall_id] from walls w where w.organization_id=${organization_id} and w.id=${wall_id}
union           
select 13 as tod, '1:00 PM' [title], w.id [wall_id] from walls w where w.organization_id=${organization_id} and w.id=${wall_id}
union           
select 14 as tod, '2:00 PM' [title], w.id [wall_id] from walls w where w.organization_id=${organization_id} and w.id=${wall_id}
union           
select 15 as tod, '3:00 PM' [title], w.id [wall_id] from walls w where w.organization_id=${organization_id} and w.id=${wall_id}
union           
select 16 as tod, '4:00 PM' [title], w.id [wall_id] from walls w where w.organization_id=${organization_id} and w.id=${wall_id}
union           
select 17 as tod, '5:00 PM' [title], w.id [wall_id] from walls w where w.organization_id=${organization_id} and w.id=${wall_id}
union           
select 18 as tod, '6:00 PM' [title], w.id [wall_id] from walls w where w.organization_id=${organization_id} and w.id=${wall_id}
union           
select 19 as tod, '7:00 PM' [title], w.id [wall_id] from walls w where w.organization_id=${organization_id} and w.id=${wall_id}
union           
select 20 as tod, '8:00 PM' [title], w.id [wall_id] from walls w where w.organization_id=${organization_id} and w.id=${wall_id}
union           
select 21 as tod, '9:00 PM' [title], w.id [wall_id] from walls w where w.organization_id=${organization_id} and w.id=${wall_id}
union           
select 22 as tod, '10:00 PM' [title], w.id [wall_id] from walls w where w.organization_id=${organization_id} and w.id=${wall_id}
union           
select 23 as tod, '11:00 PM' [title], w.id [wall_id] from walls w where w.organization_id=${organization_id} and w.id=${wall_id}
) T
left outer join (select  a.[wall_id], a.[user_id], datepart( hour, dateadd( hour, ${tzoffset}, a.tod_utc)) [tod], left( u.first_name, 1)+ '. ' + u.last_name [appt]
				from appts a, users u
				where a.user_id=u.id
				and datepart( weekday, dateadd( hour, ${tzoffset}, a.tod_utc))=1
				and a.wall_id=${wall_id}
				) sun on T.tod=sun.tod and T.wall_id=sun.wall_id
left outer join (select  a.[wall_id], a.[user_id],  datepart( hour, dateadd( hour, ${tzoffset}, a.tod_utc)) [tod], left( u.first_name, 1) + '. ' + u.last_name [appt]
				from appts a, users u
				where a.user_id=u.id
				and datepart( weekday, dateadd( hour, ${tzoffset}, a.tod_utc))=2
				and a.wall_id=${wall_id}
				) mon on T.tod=mon.tod and T.wall_id=mon.wall_id
left outer join (select  a.[wall_id], a.[user_id],  datepart( hour, dateadd( hour, ${tzoffset}, a.tod_utc)) [tod],   left( u.first_name, 1) + '. ' + u.last_name [appt]
				from appts a, users u
				where a.user_id=u.id
				and datepart( weekday, dateadd( hour, ${tzoffset}, a.tod_utc))=3
				and a.wall_id=${wall_id}
				) tue on T.tod=tue.tod and T.wall_id=tue.wall_id
left outer join (select  a.[wall_id], a.[user_id],  datepart( hour, dateadd( hour, ${tzoffset}, a.tod_utc)) [tod],   left( u.first_name, 1) + '. ' + u.last_name [appt]
				from appts a, users u
				where a.user_id=u.id
				and datepart( weekday, dateadd( hour, ${tzoffset}, a.tod_utc))=4
				and a.wall_id=${wall_id}
				) wed on T.tod=wed.tod and T.wall_id=wed.wall_id
left outer join (select  a.[wall_id], a.[user_id],  datepart( hour, dateadd( hour, ${tzoffset}, a.tod_utc)) [tod],   left( u.first_name, 1) + '. ' + u.last_name [appt]
				from appts a, users u
				where a.user_id=u.id
				and datepart( weekday, dateadd( hour, ${tzoffset}, a.tod_utc))=5
				and a.wall_id=${wall_id}
				) thu on T.tod=thu.tod and T.wall_id=thu.wall_id
left outer join (select  a.[wall_id], a.[user_id],  datepart( hour, dateadd( hour, ${tzoffset}, a.tod_utc)) [tod],  left( u.first_name, 1) + '. ' + u.last_name [appt]
				from appts a, users u
				where a.user_id=u.id
				and datepart( weekday, dateadd( hour, ${tzoffset}, a.tod_utc))=6
				and a.wall_id=${wall_id}
				) fri on T.tod=fri.tod and T.wall_id=fri.wall_id
left outer join (select  a.[wall_id], a.[user_id],  datepart( hour, dateadd( hour, ${tzoffset}, a.tod_utc)) [tod],  left( u.first_name, 1) + '. ' + u.last_name [appt]
				from appts a, users u
				where a.user_id=u.id
				and datepart( weekday, dateadd( hour, ${tzoffset}, a.tod_utc))=7
				and a.wall_id=${wall_id}
				) sat on T.tod=sat.tod and T.wall_id=sat.wall_id
order by 1,2
</value>
  </data>
  <data name="get_my_time_internal" xml:space="preserve">
    <value>
 select datepart( weekday, dateadd( hour, ${tzoffset}, a.tod_utc)) [my_dow], datepart( hour, dateadd( hour, ${tzoffset}, a.tod_utc)) [my_tod]  from appts a where user_id=${user_id}
 union 
 select distinct -1 [my_dow], -1 [my_tod] from appts a where ${user_id} not in (select user_id from appts)
 </value>
  </data>
  <data name="delete_appt" xml:space="preserve">
    <value>
	delete from appts where user_id=${user_id}
  </value>
  </data>
  <data name="get_available_walls" xml:space="preserve">
    <value>
	select id [wall_id] from walls w 
	where
	w.organization_id=${organization_id}
	and w.id not in (
	select wall_id from appts a, walls w2
	where datepart( weekday, dateadd( hour, ${tzoffset}, a.tod_utc)) = ${dow}
	and datepart( hour, dateadd( hour, ${tzoffset}, a.tod_utc)) = ${tod}
	and a.wall_id=w.id
	and w.organization_id=${organization_id}
	)
	</value>
  </data>
  <data name="get_adjacent" xml:space="preserve">
    <value>
	select * from (
	select 'before' [rel], * from appts a
	where datepart( weekday, dateadd( hour, ${tzoffset}, a.tod_utc)) = ${prev_dow}
	and datepart( hour, dateadd( hour, ${tzoffset}, a.tod_utc)) = ${prev_tod}
	and a.wall_id=${wall_id}
	union
	select 'after' [rel], * from appts a
	where datepart( weekday, dateadd( hour, ${tzoffset}, a.tod_utc)) = ${next_dow}
	and datepart( hour, dateadd( hour, ${tzoffset}, a.tod_utc)) = ${next_tod}
	and wall_id=${wall_id}
	) n
	order by 3 asc
  </value>
  </data>
  <data name="get_for_user" xml:space="preserve">
    <value>select w.title [wall_title], a.tod_utc from appts a, walls w where a.wall_id=w.id and a.user_id=${user_id}</value>
  </data>
  <data name="get_stats_internal" xml:space="preserve">
    <value>
	select my.my_dow, my.my_tod, thewall.* from
(select wc.total, cal.tod, cal.title,
(wc.total - cal.sunday) [sunday],
(wc.total - cal.monday) [monday],
(wc.total - cal.tuesday) [tuesday],
(wc.total - cal.wednesday) [wednesday],
(wc.total - cal.thursday) [thursday],
(wc.total - cal.friday) [friday],
(wc.total - cal.saturday) [saturday]
 from
(
select  T.tod, T.title,
sum(isnull( sun.appt, 0)) [sunday],
sum(isnull( mon.appt, 0)) [monday],
sum(isnull( tue.appt, 0)) [tuesday],
sum(isnull( wed.appt, 0)) [wednesday],
sum(isnull( thu.appt, 0)) [thursday],
sum(isnull( fri.appt, 0)) [friday],
sum(isnull( sat.appt, 0)) [saturday]
from
(
select 0 as tod, '12:00 AM' as title, w.id [wall_id] from walls w where w.organization_id=${organization_id}
union
select 1 as tod, '1:00 AM' as title, w.id [wall_id] from walls w where w.organization_id=${organization_id}
union
select 2 as tod, '2:00 AM' as title, w.id [wall_id] from walls w where w.organization_id=${organization_id}
union
select 3 as tod, '3:00 AM' as title, w.id [wall_id] from walls w where w.organization_id=${organization_id}
union
select 4 as tod, '4:00 AM' as title, w.id [wall_id] from walls w where w.organization_id=${organization_id}
union
select 5 as tod, '5:00 AM' as title, w.id [wall_id] from walls w where w.organization_id=${organization_id}
union
select 6 as tod, '6:00 AM' as title, w.id [wall_id] from walls w where w.organization_id=${organization_id}
union
select 7 as tod, '7:00 AM' as title, w.id [wall_id] from walls w where w.organization_id=${organization_id}
union
select 8 as tod, '8:00 AM' as title, w.id [wall_id] from walls w where w.organization_id=${organization_id}
union
select 9 as tod, '9:00 AM' as title, w.id [wall_id] from walls w where w.organization_id=${organization_id}
union
select 10 as tod, '10:00 AM' as title, w.id [wall_id] from walls w where w.organization_id=${organization_id}
union
select 11 as tod, '11:00 AM' as title, w.id [wall_id] from walls w where w.organization_id=${organization_id}
union
select 12 as tod, '12:00 PM' as title, w.id [wall_id] from walls w where w.organization_id=${organization_id}
union
select 13 as tod, '1:00 PM' as title, w.id [wall_id] from walls w where w.organization_id=${organization_id}
union
select 14 as tod, '2:00 PM' as title, w.id [wall_id] from walls w where w.organization_id=${organization_id}
union
select 15 as tod, '3:00 PM' as title, w.id [wall_id] from walls w where w.organization_id=${organization_id}
union
select 16 as tod, '4:00 PM' as title, w.id [wall_id] from walls w where w.organization_id=${organization_id}
union
select 17 as tod, '5:00 PM' as title, w.id [wall_id] from walls w where w.organization_id=${organization_id}
union
select 18 as tod, '6:00 PM' as title, w.id [wall_id] from walls w where w.organization_id=${organization_id}
union
select 19 as tod, '7:00 PM' as title, w.id [wall_id] from walls w where w.organization_id=${organization_id}
union
select 20 as tod, '8:00 PM' as title, w.id [wall_id] from walls w where w.organization_id=${organization_id}
union
select 21 as tod, '9:00 PM' as title, w.id [wall_id] from walls w where w.organization_id=${organization_id}
union
select 22 as tod, '10:00 PM' as title, w.id [wall_id] from walls w where w.organization_id=${organization_id}
union
select 23 as tod, '11:00 PM' as title, w.id [wall_id] from walls w where w.organization_id=${organization_id}
) T
left outer join (select  a.[wall_id], datepart( hour, dateadd( hour, ${tzoffset}, a.tod_utc)) [tod], 1 [appt]
				from appts a, users u
				where a.user_id=u.id
				and datepart( weekday, dateadd( hour, ${tzoffset}, a.tod_utc))=1
				) sun on T.tod=sun.tod and T.wall_id=sun.wall_id
left outer join (select  a.[wall_id], datepart( hour, dateadd( hour, ${tzoffset}, a.tod_utc)) [tod], 1 [appt]
				from appts a, users u
				where a.user_id=u.id
				and datepart( weekday, dateadd( hour, ${tzoffset}, a.tod_utc))=2
				) mon on T.tod=mon.tod and T.wall_id=mon.wall_id
left outer join (select  a.[wall_id], datepart( hour, dateadd( hour, ${tzoffset}, a.tod_utc)) [tod], 1 [appt]
				from appts a, users u
				where a.user_id=u.id
				and datepart( weekday, dateadd( hour, ${tzoffset}, a.tod_utc))=3
				) tue on T.tod=tue.tod and T.wall_id=tue.wall_id
left outer join (select  a.[wall_id], datepart( hour, dateadd( hour, ${tzoffset}, a.tod_utc)) [tod], 1 [appt]
				from appts a, users u
				where a.user_id=u.id
				and datepart( weekday, dateadd( hour, ${tzoffset}, a.tod_utc))=4
				) wed on T.tod=wed.tod and T.wall_id=wed.wall_id
left outer join (select  a.[wall_id], datepart( hour, dateadd( hour, ${tzoffset}, a.tod_utc)) [tod], 1 [appt]
				from appts a, users u
				where a.user_id=u.id
				and datepart( weekday, dateadd( hour, ${tzoffset}, a.tod_utc))=5				
				) thu on T.tod=thu.tod and T.wall_id=thu.wall_id
left outer join (select  a.[wall_id], datepart( hour, dateadd( hour, ${tzoffset}, a.tod_utc)) [tod], 1 [appt]
				from appts a, users u
				where a.user_id=u.id
				and datepart( weekday, dateadd( hour, ${tzoffset}, a.tod_utc))=6
				) fri on T.tod=fri.tod and T.wall_id=fri.wall_id
left outer join (select  a.[wall_id], datepart( hour, dateadd( hour, ${tzoffset}, a.tod_utc)) [tod], 1 [appt]
				from appts a, users u
				where a.user_id=u.id
				and datepart( weekday, dateadd( hour, ${tzoffset}, a.tod_utc))=7				
				) sat on T.tod=sat.tod and T.wall_id=sat.wall_id
group by T.tod, T.title
) cal,
(select count(*) [total] from walls where organization_id=${organization_id}) wc
) thewall,
(
  select max(my_dow) [my_dow], max(my_tod) [my_tod] 
	from (
		select datepart( weekday, dateadd( hour, ${tzoffset}, a.tod_utc)) [my_dow], datepart( hour, dateadd( hour, ${tzoffset}, a.tod_utc)) [my_tod]  from appts a where user_id=${user_id}
		union 
		--select distinct -1 [my_dow], -1 [my_tod] from appts a where 800 not in (select user_id from appts)
		select -1 [my_dow], -1 [my_tod] from users left outer join appts on appts.user_id=user_id
		) my_max
) my
order by 4</value>
  </data>
  <data name="delete_from_wall" xml:space="preserve">
    <value>delete from appts where wall_id=${wall_id}</value>
  </data>
  <data name="get_users_like" xml:space="preserve">
    <value>select	u.id [user_id], 
		u.first_name, 
		u.last_name, 
		u.email, 
		isnull(a.id, 0)		[appt_id],
		isnull(a.title, '') [wall_title],
		isnull(a.dow, 0)	[dow],
		isnull(a.tod, 0)	[tod]
from users u
left outer join 
		(
			select	a2.id [id],
					a2.user_id [user_id],
					datepart( weekday, dateadd( hour, ${tzoffset} /*-6*/, a2.tod_utc)) [dow],
					datepart( hour, dateadd( hour, ${tzoffset} /*-6*/, a2.tod_utc)) [tod],
					w.title [title]
			from
					appts a2,
					walls w
			where
					a2.wall_id = w.id
		) a on a.user_id=u.id
where u.organization_id=${organization_id} /*1*/
and (u.first_name like ${q} /*'e'*/ +'%' or u.last_name like ${q} /*'e'*/ +'%')</value>
  </data>
</root>